[{"title":"JPA介绍和hibernate基础","url":"/2019/01/26/JPA介绍和hibernate基础/","content":"\n# JPA介绍和hibernate基础 \n\n    ## 一,  ORM框架\n\n        1. ORM(Object Relational Mapping)是一种软件开发的思想,主要针对持久层:\n\n``` xml\n    O    -->     Object      -->   对象\n    R    -->     Relational      -->   关系表\n    M    -->     Mapping     -->   映射\n ```\n\n        2. ORM的作用:\n\n           1. 让开发人员不再关注SQL语句\n           2.  操作类就是操作表\n           3.  隐藏了不同数据库之间的语法差异,配置方言即可\n\n        3. 实现了ORM思想的框架我们称之为ORM框架\n\n---\n\n    ## 二,  JPA介绍\n\n        1. JPA 是sun公司提供的一套ORM框架的规范,即一套接口,第三方框架可以实现该接口来编写ORM框架实现,而我们开发人员只需要关注JPA接口的API即可,典型的面向接口开发;\n\n        2. hibernate框架是JPA接口的实现;\n\n---\n\n    ## 三, hibernate\n\n        1. hibernate与mybatis的优劣势比较:\n\n           1.  运行效率对比:  hibernate框架底层使用反射机制来读取映射对象类的注解信息,每次进行数据库的操作都会根据映射类的信息,在代码运行期间动态生成SQL语句,这样显然和直接写好SQL语句对比起来性能上差很多.  而mybatis则是先配置好SQL语句,开发人员调用方法,框架直接取预先根据配置文件生成好的SQL执行即可,显然在这方面性能上好很多;\n           2.  使用简易程度:   虽然hibernate框架在程序执行效率上有所牺牲,但是它的使用简易程度和方便性却很高,开发人员只需要关注映射类即可,不用关注SQL语句;\n\n        2. 使用hibernate框架搭建持久层\n\n            1. 创建一个maven工程,引入依赖\n\n                    ```xml\n                    <!-- hibernate 对 jpa 的支持包 -->\n                    <dependency>\n                        <groupId>org.hibernate</groupId>\n                        <artifactId>hibernate-entitymanager</artifactId>\n                        <version>5.0.7</version>\n                    </dependency>\n                    <!-- c3p0 -->\n                    <dependency>\n                        <groupId>org.hibernate</groupId>\n                        <artifactId>hibernate-c3p0</artifactId>\n                        <version>5.0.7</version>\n                    </dependency>\n                    <!-- Mysql -->\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>5.1.6</version>\n                    </dependency>\n                    <dependency>\n                        <groupId>junit</groupId>\n                        <artifactId>junit</artifactId>\n                        <version>4.9</version>\n                        <scope>test</scope>\n                    </dependency>\n                    <!-- log 日志 -->\n                    <dependency>\n                        <groupId>log4j</groupId>\n                        <artifactId>log4j</artifactId>\n                        <version>1.2.17</version>\n                    </dependency>\n\n                    ```\n\n           2. 创建一个持久化的类\n\n                ```java\n                /**\n                * * 所有的注解都是使用 JPA 的规范提供的注解，\n                * * 所以在导入注解包的时候，一定要导入 javax.persistence 下的\n                */\n                @Entity //声明实体类\n                @Table(name=\"cst_customer\") //建立实体类和表的映射关系\n                public class Customer {\n                    //声明当前私有属性为主键\n                    @Id\n                    //配置主键的生成策略,IDENTITY是数据库的自增\n                    @GeneratedValue(strategy=GenerationType.IDENTITY) \n                    @Column(name=\"cust_id\") //指定和表中 cust_id 字段的映射关系\n                    private Long custId;\n                    @Column(name=\"cust_name\") //指定和表中 cust_name 字段的映射关系\n                    private String custName;\n                    @Column(name=\"cust_source\")//指定和表中 cust_source 字段的映射关系\n                    private String custSource;\n                    @Column(name=\"cust_industry\")//指定和表中 cust_industry 字段的映射关系\n                    private String custIndustry;\n                    @Column(name=\"cust_level\")//指定和表中 cust_level 字段的映射关系\n                    private String custLevel;\n                    @Column(name=\"cust_address\")//指定和表中 cust_address 字段的映射关系\n                    private String custAddress;\n                    @Column(name=\"cust_phone\")//指定和表中 cust_phone 字段的映射关系\n                    private String custPhone;\n                    //get() set()方法略。。。\n                }\n                ```\n\n\n           3. 注解说明\n\n                ```txt\n                @Entity   ：指定当前类是实体类。\n                @Table    ：指定实体类和表之间的对应关系。\n                            属性：\n                            name：指定数据库表的名称\n                @Id       ：指定当前字段是主键。\n                @GeneratedValue     ：指定主键的生成方式。。\n                                    属性：\n                                    strategy ：指定主键生成策略。\n                                    generator：指定引用 hibernate 中声明的主键策略\n                @Column    ：指定实体类属性和数据库表之间的对应关系\n                            属性：\n                            name：指定数据库表的列名称。\n                            unique：是否唯一\n                            nullable：是否可以为空\n                            inserttable：是否可以插入\n                            updateable：是否可以更新\n                            columnDefinition: 定义建表时创建此列的 DDL\n                            secondaryTable: 从表名。如果此列不建在主表上（默认建在主表），该属性定义该列所在从表的名\n                ```\n\n            4. 创建JPA核心配置类:\n                注意：在 maven 工程的 resources 路径下创建一个名为 META-INF 的文件夹，在此文件夹下创建一个名为\n                persistence.xml 的配置文件。META-INF 文件夹名称不能修改。 persistence.xml 文件名称不能改\n\n                ```xml\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n                http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n                version=\"2.0\">\n                <!--persistence-unit 配置持久化单元 可以配置多个-->\n                <!--name：持久化单元名称\n                transaction-type：事务类型\n                RESOURCE_LOCAL：本地事务管理\n                JTA：分布式事务管理 -->\n                <persistence-unit name=\"myJpa\" transaction-type=\"RESOURCE_LOCAL\">\n                        <!--配置 JPA 规范的服务提供商 -->\n                        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n                        <!--配置持久化类-->\n                        <class>com.itheima.po.Customer</class>\n                        <properties>\n                        <!-- 数据库驱动 -->\n                        <property name=\"javax.persistence.jdbc.driver\" value=\"com.mysql.jdbc.Driver\" />\n                        <!-- 数据库地址 -->\n                        <property name=\"javax.persistence.jdbc.url\"\n                        value=\"jdbc:mysql://localhost:3306/day01\" />\n                        <!-- 数据库用户名 -->\n                        <property name=\"javax.persistence.jdbc.user\" value=\"root\" />\n                        <!-- 数据库密码 -->\n                        <property name=\"javax.persistence.jdbc.password\" value=\"123456\" />\n                        <!--jpa 提供者的可选配置：我们的 JPA 规范的提供者为 hibernate，所以 jpa 的核心配\n                        置中兼容 hibernate 的配 -->\n                        <!-- 显示SQL -->\n                        <property name=\"hibernate.show_sql\" value=\"true\" />\n                        <!-- 格式化SQL -->\n                        <property name=\"hibernate.format_sql\" value=\"true\" />\n                        <!-- 自动创建表 -->\n                        <property name=\"hibernate.hbm2ddl.auto\" value=\"update\" />\n                        </properties>\n                    </persistence-unit>\n                </persistence>\n\n                ```\n\n            5. 编写一个基本的测试类\n\n                ```java\n                @Test\n                public void testSave() {\n                    /**\n                    * 创建实体管理类工厂，使用 Persistence 的静态方法获取\n                    * 其中传递的参数为持久化单元名称，需要 jpa 配置文件中指定\n                    */\n                    EntityManagerFactory factory = Persistence.createEntityManagerFactory(\"myJpa\");\n                    //创建实体管理类\n                    EntityManager em = factory.createEntityManager();\n                    //获取事务对象\n                    EntityTransaction tx = em.getTransaction();\n                    //开启事务\n                    tx.begin();\n                    //创建要操作的对象\n                    Customer customer = new Customer();\n                    c.setCustName(\"传智播客\");\n                    //保存操作\n                    em.persist(customer);\n                    //提交事务\n                    tx.commit();\n                    //释放资源\n                    em.close();\n                }\n                ```\n\n            6. 基本的api介绍:\n\n                ```java\n                //基本的增删改查\n                entityManager.persistence(Object o);   //新增\n                entityManager.merge(Object o);  //修改\n                entityManager.remove(Object o);  //删除\n                entityManager.find(Object o);    //查询\n\n                //条件查询\n                String sql = \"form Customer where custName like ? and  .....\";     //创建条件语句\n                Query query  = entityManager.createQuery(sql);      //创建Query对象\n                query.setParameter(int index, Object value);    //设置sql语句中的参数\n                List list = query.getResultList();    //返回结果集\n\n\n                //排序\n\n                    // 创建 query 对象\n                    String jpql = \"from Customer order by custId desc\";\n                    Query query = em.createQuery(jpql);\n                    // 查询并得到返回结果\n                    List<Customer> list = query.getResultList(); // 得到集合返回类型\n\n\n\n                //分页\n\n                    // 创建 query 对象\n                    String jpql = \"from Customer\";\n                    Query query = em.createQuery(jpql);\n                    //起始索引\n                    query.setFirstResult(0);\n                    //每页显示条数\n                    query.setMaxResults(2)\n                    // 查询并得到返回结果\n                    List<Customer> list = query.getResultList(); // 得到集合返回类型\n                ```","tags":["-JPA -hibernate"]},{"title":"To me","url":"/2019/01/25/ToMe/","content":"\n\nEverything about him was old except his eyes and they were the same color as the sea and were cheerful and undefeated.&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;——Ernest Hemingway\n\n","tags":["mood"]}]